{% extends 'ZenezorejBaseBundle:Default:base.html.twig' %}

{% block stylesheets %}
	{{ parent() }}

	<style>
		#main-content {

			padding: 1em;
			max-width: 1000px;
			margin: 0 auto;
		}

		.item {
			margin: 10px;
		}

		.description {
			display: none;
		}

		.form-item {
			margin-bottom: 10px;
		}

		/**** Isotope Filtering ****/

.isotope-item {
  z-index: 2;
}

.isotope-hidden.isotope-item {
  pointer-events: none;
  z-index: 1;
}

/**** Isotope CSS3 transitions ****/

.isotope,
.isotope .isotope-item {
  -webkit-transition-duration: 0.8s;
     -moz-transition-duration: 0.8s;
      -ms-transition-duration: 0.8s;
       -o-transition-duration: 0.8s;
          transition-duration: 0.8s;
}

.isotope {
  -webkit-transition-property: height, width;
     -moz-transition-property: height, width;
      -ms-transition-property: height, width;
       -o-transition-property: height, width;
          transition-property: height, width;
}

.isotope .isotope-item {
  -webkit-transition-property: -webkit-transform, opacity;
     -moz-transition-property:    -moz-transform, opacity;
      -ms-transition-property:     -ms-transform, opacity;
       -o-transition-property:      -o-transform, opacity;
          transition-property:         transform, opacity;
}

/**** disabling Isotope CSS3 transitions ****/

.isotope.no-transition,
.isotope.no-transition .isotope-item,
.isotope .isotope-item.no-transition {
  -webkit-transition-duration: 0s;
     -moz-transition-duration: 0s;
      -ms-transition-duration: 0s;
       -o-transition-duration: 0s;
          transition-duration: 0s;
}
	</style>
	
{% endblock %}

{% block javascripts %}
	{{ parent() }}

	<script type="text/javascript">
		Shadowbox.init();

		$(function() {
			var $container = $('#container');
			
			/*$container.masonry({
				columnWidth: 220,
			  	itemSelector: '.item',
			  	"gutter": 10
			});*/


		    $container.isotope({
		        filter: '*',
		        layoutMode : 'masonry',
		        animationOptions: {
		            duration: 750,
		            easing: 'linear',
		            queue: false
		        }
		    });

			$('.item').qtip({ 
	            content: {
	                text: function(event, api) {
			            return $(this).find('a').attr('title');
			        }
	            },
	            position: {
			        my: 'top left',  
			        at: 'top left', 
			    },
			    style: {
			        classes: 'qtip-dark'
			    }
	        })

	        $('select','#form-filter').change( function() {

	        	var channelId = $(this).val();

	        	if( channelId == -1 ) {
	        		$container.isotope( { filter: "*" } )
	        		return;
	        	}

	        	var items = $('.item').filter( function() {
	        		if($(this).data('channel-id') == channelId) {
	        			return true;
	        		}
	        	})
	        	$('#container').isotope( { filter: items } )
	        });

		})


	</script>
{% endblock %}

{% block body %}

<div class="row" id="main-content">
	<div class="row">
		<form action="get" id="form-filter" >
			<div class="form-item">
				<select class="form-control">
					<option value="{{ -1 }}">Ã–sszes</option>
					{% for row in channels %}
					<option value="{{ row.id }}">{{ row.title }}</option>
					{% endfor %}
				</select>
			</div>
		</form>
	</div>
	<div class="row-fluid" id="container" >
		{% for row in videos %}
			

			<div class="item" data-channel-id="{{ row.channelId }}">
				<a class="pull-left" rel="shadowbox[Videos];width=405;height=340" title="{{ row.description }}" href="{{ row.url }}">
					<img width="{{ 200 }}" src="{{ asset('bundles/zenezorejzorejtv/img/channel_'~ row.channelId ~'/'~ row.picId ~'.jpg') }}"/>
				</a>
			</div>
		{% endfor %}
		
	</div>

</div>

{% endblock %}